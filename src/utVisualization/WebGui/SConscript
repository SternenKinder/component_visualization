import glob
import os.path
import sys

# import variables from other scons files
Import( '*' )
env = utVisualizationEnv.Clone()

# create a config.h file
config_h_content = """#ifndef __UBITRACK_CONFIG_H_INCLUDED__
#define __UBITRACK_CONFIG_H_INCLUDED__
#define UBITRACK_COMPONENTS_PATH "%s"
#define UBITRACK_COMPONENTS_RELAVIVEPATH "%s"
#endif
""" % ( install_component_prefix.encode( 'string_escape' ), 'ubitrack' )

env.CreateFile( os.path.join( Dir( '.' ).srcnode().abspath , 'config.h' ), Value( config_h_content ) )


# take driver name from directory name, replace if you don't like the result
driverName = os.path.basename( Dir( '.' ).srcnode().abspath )
#env.Append( CPPDEFINES = [ '_WIN32_WINNT=0x0501' ] )

# automatically glob files
headers = globSourceFiles( '*.h' )
sources = globSourceFiles( '*.cpp' )
sources += globSourceFiles( '*.c' )

# add regex lib
# env.Append( LIBS = boost_libs )
env.Append( LIBS = boost_libs( [ "regex" ] ) )
if sys.platform == 'win32':
	env.Append( LIBS = ['Ws2_32.lib'] )

# compile driver
libs = setupSingleComponentBuild(env, sources, driverName, "visualization")

#copy_files = env.Install( install_components_prefix, [ 'updater.js', 'prototype.js', 'green_light.png', 'yellow_light.png', 'red_light.png' ] )

# install driver
#Alias( [ 'install', 'install-all', 'install-'+"utVisualization" ], [ Install( install_components_prefix, libs[ 0 ] ), copy_files ] )